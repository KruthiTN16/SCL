import numpy as np
import matplotlib.pyplot as plt

# Fitness Function
def fitness_function(x):
    return x * np.sin(x)

# Genetic Algorithm Parameters
population_size = 20
generations = 50
crossover_rate = 0.8
mutation_rate = 0.1
gene_bounds = (0, 10)

# Initialize Population
population = np.random.uniform(gene_bounds[0], gene_bounds[1], size=population_size)
best_fitness_history = []

# Genetic Algorithm Main Loop
for generation in range(generations):
    fitness = fitness_function(population)
    sorted_indices = np.argsort(fitness)[::-1]
    top_half = population[sorted_indices[:population_size // 2]]

    children = []
    while len(children) < population_size:
        if np.random.rand() < crossover_rate:
            parent1, parent2 = np.random.choice(top_half, 2, replace=False)
            child = (parent1 + parent2) / 2
        else:
            child = np.random.choice(top_half)
        if np.random.rand() < mutation_rate:
            child += np.random.uniform(-1.0, 1.0)
        child = np.clip(child, gene_bounds[0], gene_bounds[1])
        children.append(child)

    population = np.array(children)
    best_fitness = np.max(fitness_function(population))
    best_fitness_history.append(best_fitness)
    print(f"Generation {generation + 1}: Best Fitness = {best_fitness:.4f}")

# Final Result
best_solution = population[np.argmax(fitness_function(population))]
print(f"\nBest Solution: x = {best_solution:.4f}, f(x) = {fitness_function(best_solution):.4f}")

# Plot Fitness Over Generations
plt.plot(best_fitness_history, label='Best Fitness')
plt.title("Fitness Over Generations")
plt.xlabel("Generation")
plt.ylabel("Fitness")
plt.show()



#3)Genetic Algorithm
import random

POP_SIZE = 6
GENES = 5
GENERATIONS = 10

def fitness(ind):
    x = int(ind, 2)
    return x * x

def select(pop):
    return sorted(pop, key=fitness, reverse=True)[:2]

def crossover(p1, p2):
    point = random.randint(1, GENES-1)
    return p1[:point] + p2[point:], p2[:point] + p1[point:]

def mutate(ind):
    i = random.randint(0, GENES-1)
    return ind[:i] + str(1 - int(ind[i])) + ind[i+1:]

pop = [''.join(random.choice('01') for _ in range(GENES)) for _ in range(POP_SIZE)]

for gen in range(1, GENERATIONS + 1):
    parents = select(pop)
    offspring = []
    while len(offspring) < POP_SIZE:
        c1, c2 = crossover(*parents)
        offspring += [mutate(c1), mutate(c2)]
    pop = offspring[:POP_SIZE]

    if gen % 2 == 0:  # print every 2 generations
        best = max(pop, key=fitness)
        print(f"Generation {gen}: Best individual = {best}, x = {int(best,2)}, fitness = {fitness(best)}")

best = max(pop, key=fitness)
print("\nFinal Best individual:", best, "| x =", int(best, 2), "| f(x) =", fitness(best))







#genetic
import random

def fitness(x):
    return x**2

def select(pop):
    return max(random.sample(pop, 2), key=fitness)

def crossover(p1, p2):
    point = random.randint(1, 4)
    mask = (1 << point) - 1
    return (p1 & mask) | (p2 & ~mask)

def mutate(x):
    if random.random() < 0.3:
        bit = 1 << random.randint(0, 4)
        x ^= bit
    return x

# Initial population (5 random integers from 0 to 31)
pop = [random.randint(0, 31) for _ in range(5)]

for gen in range(10):
    pop = [mutate(crossover(select(pop), select(pop))) for _ in pop]
    best = max(pop, key=fitness)
    print(f"Gen {gen}: Best x = {best}, f(x) = {fitness(best)}")
